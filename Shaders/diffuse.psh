struct DirectionalLight
{
    float3 Direction;
    float3 Color;
    float Intensity;
};

#define g_MAX_NUM_OF_DIR_LIGHTS 32

ConstantBuffer <DirectionalLight> DirectionalLightsCB[g_MAX_NUM_OF_DIR_LIGHTS] : register(b1, space0);

struct PixelShaderInput
{
    float3 Normal : NORMAL;
    float4 Position : SV_Position;
};

struct PixelShaderOutput
{
    float4 Color : SV_Target;
};

Texture2D <float4> DiffuseMap : register(t0, space0);
sampler2D DefaultSampler : register(s0, space0);

void main(in PixelShaderInput PSIn,out PixelShaderOutput PSOut)
{
    float4 Id = float4(0.0f, 0.0f, 0.0f, 1.0f);
    for(int i = 0; i < g_MAX_NUM_OF_DIR_LIGHTS; ++i)
    {
        float3 col = max(dot(PSIn.Normal, -DirectionalLightsCB[i].Direction),float3(0.0f,0.0f,0.0f)) * DirectionalLightsCB[i].Color * DirectionalLightsCB[i].Intensity;
        
        Id += float4(col, 1.0f);
    }
    PSOut.Color = Id;
}